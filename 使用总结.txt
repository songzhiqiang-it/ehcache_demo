1.在项目中加入依赖
<dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache</artifactId>
      <version>2.8.3</version>
</dependency>

 <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context-support</artifactId>
 </dependency>

2.配置ehcache.xml
<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
  updateCheck="false">
          <diskStore path="java.io.tmpdir/Tmp_EhCache" />
          <defaultCache eternal="false" 
          maxElementsInMemory="1000" 
          overflowToDisk="false" 
          diskPersistent="false"
    	  timeToIdleSeconds="0" 
          timeToLiveSeconds="3000" 
          memoryStoreEvictionPolicy="LRU" />

          
		  <cache name="demoCache" 
		  eternal="false" 
		  maxElementsInMemory="100" 
		  overflowToDisk="false" 
		  diskPersistent="false"
          timeToIdleSeconds="3000" 
          timeToLiveSeconds="6000" 
          memoryStoreEvictionPolicy="LRU" />
</ehcache>	

3.配置cacheManager
*/
	@Bean(name = "demoEhCacheCacheManager")
	public EhCacheCacheManager ehCacheCacheManager(EhCacheManagerFactoryBean bean){
	 return new EhCacheCacheManager (bean.getObject ());
	}

	/*
	* 据shared与否的设置,Spring分别通过CacheManager.create()或new CacheManager()方式来创建一个ehcache基地.
	*/
	@Bean
	public EhCacheManagerFactoryBean ehCacheManagerFactoryBean(){
	 EhCacheManagerFactoryBean cacheManagerFactoryBean = new EhCacheManagerFactoryBean ();
	 cacheManagerFactoryBean.setConfigLocation (new ClassPathResource ("ehcache.xml"));
//	 cacheManagerFactoryBean.setConfigLocation (new ClassPathResource ("cache/ehcache.xml"));
	 cacheManagerFactoryBean.setShared (true);
	 return cacheManagerFactoryBean;
	}
	
4.在DemoService的方法上使用注解
@Service
public class DemoService {

	@Cacheable(value="demoCache",key="#userName")  
	public String getUserByName(String userName) {   
	   System.out.println("两次调用第一次会执行，第二次不会执行！");  
	   return "从数据看查询得到"+userName;   
	}   
	  
//	@CacheEvict(value="demoCache",key="1000")  //将cache=demoCache, key=1000的缓存清除
	@CachePut(value="demoCache",key="#userName")  //执行方法,并更新cache=demoCache, key=userName的缓存为该方法的返回值
	public void updateUserPut(String userName) {  
		System.out.println("执行更新操作");
	   return ;   
	   //Q1：为什么更新操作会返回？@CachePut是否有实用价值
	   
	   
	   //Q2：查询条件（参数）改变，缓存是否有用
	   //应该让key的值跟参数相关
	   
	} 
	
}

5.测试
public class Main {
	
	public static void main(String[] args){
		
		
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(CacheConfiguration.class);
		
		DemoService service = context.getBean(DemoService.class);
		
		 System.out.println(service.getUserByName("A"));  
		   //会走缓存  
	    System.out.println(service.getUserByName("B"));  
	    System.out.println(service.getUserByName("B"));  
	    //更新名字，会走数据库  
	    service.updateUserPut("A");  
	   //会走缓存呢，还是数据库呢？  
	    System.out.println(service.getUserByName("A")); 
		
		
	}

}
    